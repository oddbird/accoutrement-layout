// Query Utils
// ===========


// Fix Max [function]
// ------------------
/// Subtract `1px` or `0.01em` from max breakpoint values,
/// to avoid media-query overlap.
/// @access private
/// @param {length} $value -
///   The max value to adjust
/// @return {$length} -
///   The adjusted value
@function _fix-max(
  $value
) {
  @if unit($value) == 'em' {
    $value: $value - 0.01;
  } @else if comparable($value, 1px) {
    $value: $value - 1px;
  }

  @return $value;
}


// Get Breakpoint [function]
// -------------------------
/// Return a breakpoint from the `$breakpoint` map,
/// or the accoutrement-scale `$sizes` map if it's available.
/// @access private
/// @param {string} $break -
///   The name or
@function _get-breakpoint(
  $break
) {
  @if (type-of($break) == 'number') and not unitless($break) {
    @return $break;
  }

  @if map-get($breakpoints, $break) {
    $break: map-get($breakpoints, $break) or $break;

    @if map-has-key($breakpoints, $break) {
      $break: _get-breakpoint($break);
    }
  }

  $accoutrement-scale: function-exists('size') and variable-exists('sizes');

  @if $accoutrement-scale and map-get($sizes, $break) {
    $break: size($break);
  }

  @if type-of($break) != 'number' or unitless($break) {
    @error '"#{$break}" isnâ€™t a valid length or keyword.';
  }

  @return $break;
}
