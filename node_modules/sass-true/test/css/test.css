/* # Settings ---------- */
/* true-context [mixin] */
[data-module="Settings"] [data-test="true-context [mixin]"] .assert-equal {
  -result: PASS;
  -description: 'Confirm that there is currently no "fake" scope'; }
[data-module="Settings"] [data-test="true-context [mixin]"] .assert-equal {
  -result: PASS;
  -description: 'Sets the value of scope "fake" to "this scope is not real"'; }
[data-module="Settings"] [data-test="true-context [mixin]"] .assert-equal {
  -result: PASS;
  -description: 'Confirm that our "fake" scope has been removed'; }

/* _true-context [function] */
[data-module="Settings"] [data-test="_true-context [function]"] .assert-equal {
  -result: PASS;
  -description: 'Returns the current module name'; }
[data-module="Settings"] [data-test="_true-context [function]"] .assert-equal {
  -result: PASS;
  -description: 'Returns the current test name'; }

/* # Utilities ---------- */
/* Map Add [function] */
[data-module="Utilities"] [data-test="Map Add [function]"] .assert-equal {
  -result: PASS;
  -description: 'Returns the sum of two numeric maps'; }

/* String Split [function] */
[data-module="Utilities"] [data-test="String Split [function]"] .assert-equal {
  -result: PASS;
  -description: 'Returns a list of substrings, based on any delimiter.'; }

/* Strict Equal [function] */
[data-module="Utilities"] [data-test="Strict Equal [function]"] .assert-equal {
  -result: PASS;
  -description: 'Returns false for equal numbers with different units.'; }
[data-module="Utilities"] [data-test="Strict Equal [function]"] .assert-equal {
  -result: PASS;
  -description: 'Returns true for numbers that are truely equal.'; }

/* True Inspect [function] */
[data-module="Utilities"] [data-test="True Inspect [function]"] .assert-equal {
  -result: PASS;
  -description: 'Maps are rendered to strings.'; }
[data-module="Utilities"] [data-test="True Inspect [function]"] .assert-equal {
  -result: PASS;
  -description: 'Null is rendered to a string.'; }

/* # Messages ---------- */
/* True selector */
[data-module="Messages"] [data-test="True selector"] .assert-equal {
  -result: PASS;
  -description: 'Returns a selector string based on the current context'; }

/* # Results ---------- */
/* Reset */
[data-module="Results"] [data-test="Reset"] .assert-true {
  -result: PASS;
  -description: 'Add a passing result to the test'; }
[data-module="Results"] [data-test="Reset"] .assert-unequal {
  -result: PASS;
  -description: 'Check that test results are not in a clean state'; }
[data-module="Results"] [data-test="Reset"] .assert-equal {
  -result: PASS;
  -description: 'Resets the results for a given scope'; }

/* Get results */
[data-module="Results"] [data-test="Get results"] .assert-equal {
  -result: PASS;
  -description: 'Returns the current results map for a given scope'; }

/* Get result */
[data-module="Results"] [data-test="Get result"] .assert-equal {
  -result: PASS;
  -description: 'Collates a set of results to pass up the scope hierarchy'; }

/* # Modules ---------- */
/* test-module */
[data-module="Modules"] [data-test="test-module"] .assert-equal {
  -result: PASS;
  -description: 'Resets module scope results'; }
[data-module="Modules"] [data-test="test-module"] .assert-equal {
  -result: PASS;
  -description: 'Changes the current module context'; }

/* # Tests ---------- */
/* test [mixin] */
[data-module="Tests"] [data-test="test [mixin]"] .assert-equal {
  -result: PASS;
  -description: 'Resets module scope results'; }
[data-module="Tests"] [data-test="test [mixin]"] .assert-equal {
  -result: PASS;
  -description: 'Changes the current test context'; }

/* # Assert ---------- */
/* Simple assertions */
[data-module="Assert"] [data-test="Simple assertions"] .assert-true {
  -result: PASS;
  -description: 'True should assert true.'; }
[data-module="Assert"] [data-test="Simple assertions"] .assert-false {
  -result: PASS;
  -description: 'False should assert false.'; }
[data-module="Assert"] [data-test="Simple assertions"] .assert-equal {
  -result: PASS;
  -description: '1 and 1 should be equal.'; }
[data-module="Assert"] [data-test="Simple assertions"] .assert-unequal {
  -result: PASS;
  -description: '1 and 3 should be un-equal.'; }

/* CSS output assertions */
[data-module="Assert"] [data-test="CSS output assertions"] [data-assert="Input and output selector patterns match"] .input {
  -property: value; }
[data-module="Assert"] [data-test="CSS output assertions"] [data-assert="Input and output selector patterns match"] .expect {
  -property: value; }

/* # SUMMARY ---------- */
/* 14 Tests: */
/*  - 13 Passed */
/*  - 0 Failed */
/*  - 1 Output to CSS */
/* -------------------- */