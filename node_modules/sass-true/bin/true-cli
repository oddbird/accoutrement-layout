#!/usr/bin/env ruby
require 'sass'
require 'true'
require 'yaml'
require 'optparse'
COLORS = {
  :ok => "\033[92m",
  :fail => "\033[91m",
  :end => "\033[0m"
}
options = {'debug' => false, 'silent' => false, 'color' => false}
config_file = File.join(Dir.pwd, 'test', 'true.yml')
OptionParser.new do |opts|
  opts.banner = "Usage: true-cli [options] file"

  opts.on('-c', '--config PATH', String, 'path to config file') do |config|
    config_file  = File.join(Dir.pwd, config)
  end
  opts.on('-d', '--debug') do
    options['debug'] = true
  end
  opts.on('-s', '--silent') do
    options['silent'] = true
  end
end.parse!(ARGV)

def with_captured_stdout
  begin
    old_stderr = $stderr
    $stderr = StringIO.new('', 'r+')
    yield
    $stderr.string
  ensure
    $stderr = old_stderr
  end
end
if File.exists?(config_file)
  puts "Using config file: #{config_file}" unless options['silent']
  config_options = YAML.load(File.read(config_file))
  options.merge!(config_options['options']) if config_options.has_key?('options')
  if options['debug']
    puts config_options.inspect
  end
  if config_options.has_key?('require')
    config_options['require'].each do |path|
      require path
    end
  end
end
if ARGV.empty?
  puts "No test files supplied"
  exit(2)
end

output = with_captured_stdout do
  ARGV.each do |file|
    Sass::Engine.for_file(file, {}).render
  end
end


matches = output.match(%r{(?<tests>\d+) Tests, (?<passed>\d+) Passed, (?<failed>\d+) Failed})
if matches.nil? # return sass errors
  puts output
  exit(2)
end

if matches[:failed] == '0'
  if options['color']
    noun = matches[:tests].to_i == 1 ? 'Test' : 'Tests'
    puts COLORS[:ok] + "#{matches[:tests]} #{noun}, #{matches[:passed]} Passed, #{matches[:failed]} Failed" + COLORS[:end] unless options['silent']
  else
    puts output unless options['silent']
  end
  exit(0)
else
  if options['color']
    puts COLORS[:fail] + output + COLORS[:end] unless options['silent']
  else
    puts output unless options['silent']
  end
  exit(3)
end
